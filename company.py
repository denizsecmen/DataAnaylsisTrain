# -*- coding: utf-8 -*-
"""Send It Later.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/123slYDgdsw4iqDDWHCrkWM75KwLCS7vX
"""

# -*- coding: utf-8 -*-
"""Data visualtion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hnbG5Td6pLkSPlm8Jg9TWDrvFHA3O1Gl
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error

"""Importing Libaries"""

data=pd.read_csv('company.csv')
print(data.describe())

"""Small Description about dataset."""

plt.scatter(data.iloc[:,0],data.iloc[:,3:],label='TV',c='red')
plt.scatter(data.iloc[:,1],data.iloc[:,3:],label='Radio',c='blue')
plt.scatter(data.iloc[:,2],data.iloc[:,3:],label='Newspaper',c='green')

plt.legend(loc='best')
plt.title('Data Visualition')
plt.xlabel('Cost')
plt.ylabel('Sales')

"""Data visiuatlion(Matplot.lib)"""

"""Importing libraries and decription and data visualtion

"""

sns.lineplot(data=data, y='Sales', x='TV', label='TV')
plt.title('Sales vs Advertising Expenditure')
plt.xlabel('Advertising Expenditure')
plt.ylabel('Sales')
plt.show()
sns.lineplot(data=data, y='Sales', x='Radio',color='red', label='Radio')
plt.title('Sales vs Advertising Expenditure')
plt.xlabel('Advertising Expenditure')
plt.ylabel('Sales')
plt.show()
sns.lineplot(data=data, y='Sales', x='Newspaper',color='green', label='Newspaper')
plt.title('Sales vs Advertising Expenditure')
plt.xlabel('Advertising Expenditure')
plt.ylabel('Sales')
plt.show()

"""Seabearn data visualiton lineplot."""

ss=StandardScaler()
X=data.iloc[:,:3]
Y=data.iloc[:,3]
SX=ss.fit_transform(X)
X_train,X_test,Y_train,Y_test=train_test_split(SX,Y,test_size=0.3)
DT=DecisionTreeRegressor()
DT.fit(X_train,Y_train)
predict=DT.predict(X_test)
print(mean_squared_error(predict,Y_test))
v=input('Enter the values(seperate with comma):')
g=v.split(',')
g=[float(t) for t in g]
print(DT.predict([g])[0])